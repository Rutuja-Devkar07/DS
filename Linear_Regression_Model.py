# -*- coding: utf-8 -*-
"""DSBDA_PR4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LMv58hdSTfCPlbS0xlpL29stG5TlupTT
"""

# 4) Data Analytics I
# Create a Linear Regression Model using Python/R to predict home prices using Boston
# Housing Dataset (https://www.kaggle.com/c/boston-housing). The Boston Housing dataset
# contains information about various houses in Boston through different parameters. There
# are 506 samples and 14 feature variables in this dataset.

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('BostonHousing.csv')

# Display basic information about the dataset
print("Dataset Info:")
print(df.info())

print("First few rows of the dataset:")
print(df.head())

print("Basic statistics of the dataset:")
print(df.describe())

# Split the data into features (X) and target (y)
X = df.drop('medv', axis=1)
y = df['medv']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train the linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Calculate performance metrics
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

print("Model Performance Metrics:")
print("Root Mean Square Error: " + str(round(rmse, 4)))

print("R-squared Score: " + str(round(r2, 4)))

# Feature importance
feature_importance = pd.DataFrame({
    'Feature': X.columns,
    'Coefficient': model.coef_
})
feature_importance = feature_importance.sort_values(by='Coefficient', key=abs, ascending=False)

print("Feature Importance:")
print(feature_importance)

# Create visualizations
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, alpha=0.5)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--', lw=2)
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual vs Predicted House Prices')
plt.tight_layout()
plt.show()

# Correlation Heatmap
plt.figure(figsize=(12, 8))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm', center=0)
plt.title('Feature Correlation Heatmap')
plt.tight_layout()
plt.show()

# Residuals Plot
residuals = y_test - y_pred
plt.figure(figsize=(10, 6))
plt.scatter(y_pred, residuals, alpha=0.5)
plt.xlabel('Predicted Prices')
plt.ylabel('Residuals')
plt.title('Residuals Plot')
plt.axhline(y=0, color='r', linestyle='--')
plt.tight_layout()
plt.show()

