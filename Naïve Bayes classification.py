# -*- coding: utf-8 -*-
"""DSBDA_PR6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17DRHjMJO8ZIPCJVqsw5B-o_wG6WoOIz1
"""

# 6) Data Analytics III
# 1. Implement Simple Naïve Bayes classification algorithm using Python/R on iris.csv dataset.
# 2. Compute Confusion matrix to find TP, FP, TN, FN, Accuracy, Error rate, Precision, Recall on
# the given dataset.

# Import required libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score

# Load the dataset
df = pd.read_csv('IRIS.csv')

df

print(df.head())

print(df.columns)

X=df[['sepal_length', 'sepal_width', 'petal_length', 'petal_width','species']].values

y=df['species'].values

from sklearn.preprocessing import LabelEncoder

label_encoder=LabelEncoder()
y=label_encoder.fit_transform(y)

# ✅ Drop non-numeric column if any (like 'species' if accidentally present in X)
X = df[['sepal_length', 'sepal_width', 'petal_length', 'petal_width']]  # only numeric columns
y = df['species']  # Target variable

# Split into Train and Test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)

# Build Naive Bayes model
model = GaussianNB()
model.fit(X_train, y_train)

# Predict
y_pred = model.predict(X_test)

#confusion Matrix
cm = confusion_matrix(y_test, y_pred)

print(cm)

tp=cm.diagonal().sum()
fp=cm.sum(axis=0)-cm.diagonal()
fn=cm.sum(axis=1)-cm.diagonal()
tn=cm.sum()-(tp+fp+fn)

# Accuracy
accuracy = accuracy_score(y_test, y_pred)
error_rate = 1 - accuracy

# Precision and Recall (macro average)
precision = precision_score(y_test, y_pred, average='weighted')
recall = recall_score(y_test, y_pred, average='weighted')

print("Confusion Matrix : ")
print(cm)
print(f"True Positives (TP) : {tp}")
print(f"True Negatives (TN) : {tn.sum()}")
print(f"False Positives (FP) : {fp.sum()}")
print(f"False Negatives (FN) : {fn.sum()}")
print(f"Accuracy : {accuracy:.2f}")
print(f"Error Rate : {error_rate:.2f}")
print(f"Precision : {precision:.2f}")
print(f"Recall : {recall:.2f}")

