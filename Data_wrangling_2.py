# -*- coding: utf-8 -*-
"""DSBDA_PR2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uqXQ5PEjaFIXW9sWGOE8LPScKFR5BrfM
"""
# 2) Data Wrangling II
# Create an “Academic performance” dataset of students and perform the following
# operations using Python.
# 1. Scan all variables for missing values and inconsistencies. If there are missing values and/or
# inconsistencies, use any of the suitable techniques to deal with them.
# 2. Scan all numeric variables for outliers. If there are outliers, use any of the suitable
# techniques to deal with them.
# 3. Apply data transformations on at least one of the variables. The purpose of this
# transformation should be one of the following reasons: to change the scale for better
# understanding of the variable, to convert a non-linear relation into a linear one, or to
# decrease the skewness and convert the distribution into a normal distribution.


import pandas as pd

import numpy as np

data = {
    'student_id': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    'math_score': [88, 92, 80, 77, np.nan, 85, 95, 60, 65, 70],
    'english_score': [78, 85, 80, 90, 85, 88, 92, 55, np.nan, 65],
    'science_score': [85, 80, 75, 70, 72, 88, 90, 40, 50, 55],
    'attendance_rate': [0.9, 0.95, 0.85, 0.8, 0.92, 0.88, 0.97, 0.6, 0.7, np.nan]
}

df = pd.DataFrame(data)

print(df)

# Check missing values
print(df.isnull().sum())

series = pd.isnull(df["math_score"])
df[series]

df['math_score'].fillna(df['math_score'].mean())
df['english_score'].fillna(df['english_score'].mean())
df['attendance_rate'].fillna(df['attendance_rate'].mean())

print(df)

import matplotlib.pyplot as plt

# Boxplots for each score
df[['math_score', 'english_score', 'science_score']].boxplot()
plt.show()

# Example for science_score
Q1 = df['science_score'].quantile(0.25)
Q3 = df['science_score'].quantile(0.75)
IQR = Q3 - Q1

lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Remove outliers
df = df[(df['science_score'] >= lower_bound) & (df['science_score'] <= upper_bound)]
print(df)

df[['math_score', 'english_score', 'science_score']].boxplot()
plt.show()

# Apply log transformation
df['math_score_log'] = np.log(df['math_score'])

# Compare before and after
print(df[['math_score', 'math_score_log']].head())

