# -*- coding: utf-8 -*-
"""DSBDA_PR5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p7lqGaz2Nc8t_YMVWEv0mXS6tTFIFBCk
"""

# 5) Data Analytics II
# 1. Implement logistic regression using Python/R to perform classification on
# Social_Network_Ads.csv dataset.
# 2. Compute Confusion matrix to find TP, FP, TN, FN, Accuracy, Error rate, Precision, Recall on
# the given dataset.

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score

# Load the dataset
data = pd.read_csv('Social_Network_Ads.csv')

# Inspect the dataset (assuming it has columns: 'Age', 'EstimatedSalary', 'Purchased')
print(data.head())

# Feature selection and target variable
X = data[ [ 'Age', 'EstimatedSalary']].values
y = data['Purchased'].values

# Split the dataset into training and test sets (80-20 split)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

#feature Scalling
scaler = StandardScaler()

X_train=scaler.fit_transform (X_train)
X_test=scaler.transform (X_test)

# Logistic Regression model
model = LogisticRegression (random_state=42)
model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)

# Confusion matrix
cm = confusion_matrix (y_test, y_pred)
tn, fp, fn, tp = cm.ravel()

print(f"\nTrue Positives (TP): {tp}")
print(f"False Positives (FP): {fp}")
print(f"True Negatives (TN): {tn}")
print(f"False Negatives (FN): {fn}")

accuracy= accuracy_score (y_test, y_pred)
error_rate= 1 -accuracy
precision= precision_score (y_test, y_pred)
recall = recall_score (y_test, y_pred)

print("Confusion Matrix:")
print(cm)
print (f"True Positives (TP): {tp}")
print(f"False Positives (FP): {fp}")
print (f"True Negatives (TN): {tn}")
print (f"False Negatives (FN): {fn}")
print (f"Accuracy: {accuracy:.2f}")
print (f"Error Rate: {error_rate:.2f}")
print("Precision: {precision: .2f}")
print (f"Recall: {recall:.2f}")

